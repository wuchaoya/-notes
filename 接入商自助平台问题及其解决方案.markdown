<center>接入商自助平台问题</center>
--------------------

### 跨域问题
账号登录需要调用uc的接口，前端加解密不好实现，统一走mgt服务器，配置反向代理解决跨域问题
1. __开发中跨域问题解决方法__

    配置**config**文件夹下的**index.js**
    ```js
    dev: {
       env: require("./dev.env"),
       port: 18080,
       autoOpenBrowser: true,
       assetsSubDirectory: "static",
       assetsPublicPath: "/",
       proxyTable: {
          //  "/rest" :{
               target:
               "http://172.16.2.76:8080/rest",//服务器ip地址和端口
               changeOrigin:true,
               pathRewrite:{
                   "/rest":""
               }
           }
       },
    ```    
2. __生产环境跨域问题解决方法__

  配置nginx **conf**文件下的**nginx.conf**文件，配置nginx时候不能一下启动多个，会影响到重启nginx，导致配置不生效

  ```Josn

            #user  nobody;
            worker_processes  1;

            #error_log  logs/error.log;
            #error_log  logs/error.log  notice;
            #error_log  logs/error.log  info;

            #pid        logs/nginx.pid;
            events {
                worker_connections  1024;
            }
            http {
                include       mime.types;
                default_type  application/octet-stream;

                #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                #                  '$status $body_bytes_sent "$http_referer" '
                #                  '"$http_user_agent" "$http_x_forwarded_for"';

                #access_log  logs/access.log  main;

                sendfile        on;
                #tcp_nopush     on;

                #keepalive_timeout  0;
                keepalive_timeout  65;

                #gzip  on;

                upstream tenant {
                    server 172.16.2.144:8090;
                    ip_hash;
                }
                server {
                    listen       8080;
                    server_name  127.0.0.1;

                    #charset koi8-r;

                    #access_log  logs/host.access.log  main;

                    allow   all;
                    #location / {
                    #    root   html;
                    #    index  index.html index.htm;
                    #}

                    #error_page  404              /404.html;

                    # redirect server error pages to the static page /50x.html
                    #
                    error_page   500 502 503 504  /50x.html;
                    #location = /50x.html {
                    #    root   html;
                    #}
                    location /rest {
                        #rewrite  ^/rest/(.*)$ /$1 break;
                        #include  uwsgi_params;
                        proxy_pass   http://tenant;
                        allow   127.0.0.1;
                    }

                    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
                    #
                    #location ~ \.php$ {
                    #    proxy_pass   http://127.0.0.1;
                    #}

                    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
                    #
                    #location ~ \.php$ {
                    #    root           html;
                    #    fastcgi_pass   127.0.0.1:9000;
                    #    fastcgi_index  index.php;
                    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
                    #    include        fastcgi_params;
                    #}

                    # deny access to .htaccess files, if Apache's document root
                    # concurs with nginx's one
                    #
                    #location ~ /\.ht {
                    #    deny  all;
                    #}
                }
                # another virtual host using mix of IP-, name-, and port-based configuration
                #
                #server {
                #    listen       8000;
                #    listen       somename:8080;
                #    server_name  somename  alias  another.alias;

                #    location / {
                #        root   html;
                #        index  index.html index.htm;
                #    }
                #}
                # HTTPS server
                #
                #server {
                #    listen       443 ssl;
                #    server_name  localhost;

                #    ssl_certificate      cert.pem;
                #    ssl_certificate_key  cert.key;

                #    ssl_session_cache    shared:SSL:1m;
                #    ssl_session_timeout  5m;

                #    ssl_ciphers  HIGH:!aNULL:!MD5;
                #    ssl_prefer_server_ciphers  on;

                #    location / {
                #        root   html;
                #        index  index.html index.htm;
                #    }
                #}

            }

  ```
### Element-UI
  __vue-cli脚手架引入Element UI__

    1. 安装 loader 模块

    <code>
    cnpm install style-loader -D</br>
    cnpm install css-loader -D</br>
    cnpm install file-loader -D
    </code>

    2. 安装 Element-UI 模块

    <code>cnpm install element-ui -S</code>

    3. 在 main.js 中引入

    <code>
    import ElementUI from ‘element-ui‘</br>
    import ‘element-ui/lib/theme-default/index.css‘</br>
    Vue.use(ElementUI)
   </code>

  __引入element使用部分控件无效解决方法__

  检测element的版本，element的版本大于"element-ui": "1.2.9",就有可能失效
  packjson中"element-ui": "^1.2.9"时候，执行npm install 下载来的element-ui不一定是
  1.2.9,会下载最新版本


### vuex

__页面刷新vuex管理的数据丢失__

目前解决方法存在localstorage中

### 其他问题
__enter键按下刷新当前界面__

当表单只有一个输入框的时候，按enter就会submit

__获取图片宽高__

```JS
            /** 选择图片上传，在上传前获取宽高
            * @param file 要上传的文件
            * @param callback    回调函数
            */
        getImgWH(file,callback){
              //读取图片数据
              let reader = new FileReader();
              reader.onload = function (e) {
                  let data = e.target.result;
                  //加载图片获取图片真实宽度和高度
                  let image = new Image();
                  image.onload=function(){
                      callback(image.width,image.height,file)
                  };
                  image.src= data;
              };
              reader.readAsDataURL(file);
          },
```
__下载文件__

  `location.href= url`

__不依赖element上传控件实现上传功能__

  ```js
    if (window.FormData)
     {
          var formData = new FormData();
        //添加参数
          formData.append();

      }
  ```
__vue2使用axios代替vue-resource__

不要问我那个好，为什么要用axios，我只是偶尔看到vue-resource不是官方推荐的了，
又没用过vue-resource，也谈不上熟悉，索性就直接换成了axios.
